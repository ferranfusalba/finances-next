// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole           @default(USER)
  accounts      UserAccount[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  finAccounts   FinancialAccount[]
  // budgets   Budget[]
}

model UserAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model AccountTransaction {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  concept   String
  type      String
  import    String
  currency  String
  notes     String
  Account   FinancialAccount? @relation(fields: [accountId], references: [id])
  accountId Int
}

model BudgetTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  concept   String
  type      String
  import    String
  currency  String
  notes     String
  Budget    Budget?  @relation(fields: [budgetId], references: [id])
  budgetId  Int
}

// @default(uuid())
model FinancialAccount {
  id             Int                  @id @default(autoincrement())
  order          Int                  @default(autoincrement())
  name           String
  code           String               @unique
  active         Boolean
  type           String
  description    String?
  initialBalance Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  User           User?                @relation(fields: [userId], references: [id])
  userId         String?
  transactions   AccountTransaction[]
}

model Budget {
  id             Int                 @id @default(autoincrement())
  order          Int                 @default(autoincrement())
  name           String
  code           String              @unique
  active         Boolean
  type           String
  description    String?
  initialBalance Float
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  // User           User?               @relation(fields: [userId], references: [id])
  userId         Int?
  transactions   BudgetTransaction[]
}
