// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole      @default(USER)
  userAccounts  UserAccount[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  budgets       Budget[]
}

model UserAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model AccountTransaction {
  id                          String   @id @default(uuid())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  payee                       String   @default("")
  concept                     String
  type                        String
  currency                    String
  amount                      Float
  balance                     Float
  foreignCurrency             String?  @default("")
  foreignCurrencyAmount       Float?   @default(0.00)
  foreignCurrencyExchangeRate Float?   @default(0.00)
  category                    String   @default("")
  subcategory                 String?  @default("")
  tags                        String?  @default("")
  dateTime                    DateTime @default(now())
  timezone                    String?  @default("")
  location                    String?  @default("")
  notes                       String
  Account                     Account? @relation(fields: [accountId], references: [id])
  accountId                   String
}

model BudgetTransaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  concept   String
  type      String
  amount    Float
  balance   Float
  currency  String
  notes     String
  Budget    Budget?  @relation(fields: [budgetId], references: [id])
  budgetId  String
}

model Account {
  id              String               @id @default(uuid())
  order           Int                  @default(autoincrement())
  name            String
  code            String
  bankName        String               @default("")
  active          Boolean
  type            String
  description     String?
  defaultCurrency String               @default("")
  initialBalance  Float
  currentBalance  Float                @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  User            User?                @relation(fields: [userId], references: [id])
  userId          String?
  transactions    AccountTransaction[]

  @@unique([userId, code])
}

model Budget {
  id             String              @id @default(uuid())
  order          Int                 @default(autoincrement())
  name           String
  code           String
  active         Boolean
  type           String
  description    String?
  initialBalance Float
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  User           User?               @relation(fields: [userId], references: [id])
  userId         String?
  transactions   BudgetTransaction[]

  @@unique([userId, code])
}
