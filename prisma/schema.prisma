// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  budgets   Budget[]
}

model AccountTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  concept   String
  type      String
  import    String
  currency  String
  notes     String
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId Int
}

model BudgetTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  concept   String
  type      String
  import    String
  currency  String
  notes     String
  Budget    Budget?  @relation(fields: [budgetId], references: [id])
  budgetId  Int
}

// @default(uuid())
model Account {
  id             Int                  @id @default(autoincrement())
  name           String
  active         Boolean?
  type           Int?
  description    String?
  initialBalance String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  User           User?                @relation(fields: [userId], references: [id])
  userId         Int?
  transactions   AccountTransaction[]
}

model Budget {
  id             Int                 @id @default(autoincrement())
  name           String
  active         Boolean?
  type           Int?
  description    String?
  initialBalance String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  User           User?               @relation(fields: [userId], references: [id])
  userId         Int?
  transactions   BudgetTransaction[]
}
